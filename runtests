#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys


def is_set(flag):
    try:
        sys.argv.remove(flag)
    except ValueError:
        return False
    else:
        return True


def run_tests(args):
    args.insert(1, "test")
    args.insert(2, "rest_framework_tmp_perms_token_tests")

    from django.core.management import execute_from_command_line

    sys.path.insert(0, "tests")
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

    execute_from_command_line(args)


def run_coverage(args):
    """
    Run tests with coverage tooling.
    """
    import subprocess

    # Run tests
    print('TESTS:')
    cmd = 'coverage run ' + ' '.join(args) + ' --skip-coverage'
    ret = subprocess.call(cmd, shell=True)
    if ret:
        return ret

    # Run coverage
    print('\nCOVERAGE REPORT:')
    output = subprocess.check_output('coverage report', shell=True).decode('utf-8')
    print(output)

    # Analyze coverage report
    coverage = output.split()[-1]
    if coverage == '100%':
        print("Success, coverage at 100%")
        return 0
    else:
        print("Failure, coverage not at 100% (got {})".format(coverage))
        return -1


if __name__ == "__main__":
    if is_set('--skip-coverage'):
        sys.exit(run_tests(sys.argv))
    else:
        sys.exit(run_coverage(sys.argv))
